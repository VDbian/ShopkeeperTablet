package com.administrator.shopkeepertablet.model.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.administrator.shopkeepertablet.model.entity.SpecEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPEC_ENTITY".
*/
public class SpecEntityDao extends AbstractDao<SpecEntity, String> {

    public static final String TABLENAME = "SPEC_ENTITY";

    /**
     * Properties of entity SpecEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, String.class, "uId", true, "U_ID");
        public final static Property ProductId = new Property(1, String.class, "productId", false, "PRODUCT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Price = new Property(3, double.class, "price", false, "PRICE");
        public final static Property RestaurantId = new Property(4, String.class, "restaurantId", false, "RESTAURANT_ID");
        public final static Property ProductName = new Property(5, String.class, "productName", false, "PRODUCT_NAME");
    }

    private Query<SpecEntity> foodEntity_SpecEntityListQuery;

    public SpecEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SpecEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPEC_ENTITY\" (" + //
                "\"U_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uId
                "\"PRODUCT_ID\" TEXT," + // 1: productId
                "\"NAME\" TEXT," + // 2: name
                "\"PRICE\" REAL NOT NULL ," + // 3: price
                "\"RESTAURANT_ID\" TEXT," + // 4: restaurantId
                "\"PRODUCT_NAME\" TEXT);"); // 5: productName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPEC_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SpecEntity entity) {
        stmt.clearBindings();
 
        String uId = entity.getUId();
        if (uId != null) {
            stmt.bindString(1, uId);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(2, productId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getPrice());
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(5, restaurantId);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(6, productName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SpecEntity entity) {
        stmt.clearBindings();
 
        String uId = entity.getUId();
        if (uId != null) {
            stmt.bindString(1, uId);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(2, productId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getPrice());
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(5, restaurantId);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(6, productName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SpecEntity readEntity(Cursor cursor, int offset) {
        SpecEntity entity = new SpecEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // productId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getDouble(offset + 3), // price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // restaurantId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // productName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SpecEntity entity, int offset) {
        entity.setUId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProductId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.getDouble(offset + 3));
        entity.setRestaurantId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SpecEntity entity, long rowId) {
        return entity.getUId();
    }
    
    @Override
    public String getKey(SpecEntity entity) {
        if(entity != null) {
            return entity.getUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SpecEntity entity) {
        return entity.getUId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "specEntityList" to-many relationship of FoodEntity. */
    public List<SpecEntity> _queryFoodEntity_SpecEntityList(String productId) {
        synchronized (this) {
            if (foodEntity_SpecEntityListQuery == null) {
                QueryBuilder<SpecEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductId.eq(null));
                foodEntity_SpecEntityListQuery = queryBuilder.build();
            }
        }
        Query<SpecEntity> query = foodEntity_SpecEntityListQuery.forCurrentThread();
        query.setParameter(0, productId);
        return query.list();
    }

}
