package com.administrator.shopkeepertablet.model.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.administrator.shopkeepertablet.model.entity.FoodEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOD_ENTITY".
*/
public class FoodEntityDao extends AbstractDao<FoodEntity, String> {

    public static final String TABLENAME = "FOOD_ENTITY";

    /**
     * Properties of entity FoodEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProductId = new Property(0, String.class, "productId", true, "PRODUCT_ID");
        public final static Property RestaurantId = new Property(1, String.class, "restaurantId", false, "RESTAURANT_ID");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property ProductName = new Property(3, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property PinYin = new Property(4, String.class, "pinYin", false, "PIN_YIN");
        public final static Property Unit = new Property(5, String.class, "unit", false, "UNIT");
        public final static Property MinUnit = new Property(6, String.class, "minUnit", false, "MIN_UNIT");
        public final static Property ProductTypeId = new Property(7, String.class, "productTypeId", false, "PRODUCT_TYPE_ID");
        public final static Property ProductTypeName = new Property(8, String.class, "productTypeName", false, "PRODUCT_TYPE_NAME");
        public final static Property Price = new Property(9, double.class, "price", false, "PRICE");
        public final static Property ProductFile = new Property(10, String.class, "productFile", false, "PRODUCT_FILE");
        public final static Property ProductImage = new Property(11, String.class, "productImage", false, "PRODUCT_IMAGE");
        public final static Property State = new Property(12, int.class, "state", false, "STATE");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property TasteID = new Property(14, String.class, "tasteID", false, "TASTE_ID");
        public final static Property IsDaZhe = new Property(15, String.class, "IsDaZhe", false, "IS_DA_ZHE");
        public final static Property DaZhe = new Property(16, String.class, "daZhe", false, "DA_ZHE");
        public final static Property WarCount = new Property(17, String.class, "warCount", false, "WAR_COUNT");
        public final static Property IsClose = new Property(18, int.class, "IsClose", false, "IS_CLOSE");
        public final static Property IsCloseName = new Property(19, String.class, "isCloseName", false, "IS_CLOSE_NAME");
        public final static Property ProductCount = new Property(20, int.class, "productCount", false, "PRODUCT_COUNT");
        public final static Property ChuCaiType = new Property(21, String.class, "chuCaiType", false, "CHU_CAI_TYPE");
        public final static Property CanDiscount = new Property(22, int.class, "canDiscount", false, "CAN_DISCOUNT");
        public final static Property MemberPice = new Property(23, double.class, "memberPice", false, "MEMBER_PICE");
        public final static Property SalesType = new Property(24, int.class, "salesType", false, "SALES_TYPE");
        public final static Property AccordIng = new Property(25, String.class, "accordIng", false, "ACCORD_ING");
        public final static Property ProductProperty = new Property(26, String.class, "productProperty", false, "PRODUCT_PROPERTY");
        public final static Property ProductGive = new Property(27, String.class, "productGive", false, "PRODUCT_GIVE");
        public final static Property TasteType = new Property(28, String.class, "tasteType", false, "TASTE_TYPE");
        public final static Property PrintWay = new Property(29, String.class, "printWay", false, "PRINT_WAY");
        public final static Property Type = new Property(30, boolean.class, "type", false, "TYPE");
        public final static Property PackageName = new Property(31, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Counts = new Property(32, String.class, "counts", false, "COUNTS");
        public final static Property Guid = new Property(33, String.class, "guid", false, "GUID");
    }

    private DaoSession daoSession;

    private Query<FoodEntity> foodTypeEntity_FoodEntityListQuery;

    public FoodEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FoodEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOD_ENTITY\" (" + //
                "\"PRODUCT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: productId
                "\"RESTAURANT_ID\" TEXT," + // 1: restaurantId
                "\"ID\" TEXT," + // 2: id
                "\"PRODUCT_NAME\" TEXT," + // 3: productName
                "\"PIN_YIN\" TEXT," + // 4: pinYin
                "\"UNIT\" TEXT," + // 5: unit
                "\"MIN_UNIT\" TEXT," + // 6: minUnit
                "\"PRODUCT_TYPE_ID\" TEXT," + // 7: productTypeId
                "\"PRODUCT_TYPE_NAME\" TEXT," + // 8: productTypeName
                "\"PRICE\" REAL NOT NULL ," + // 9: price
                "\"PRODUCT_FILE\" TEXT," + // 10: productFile
                "\"PRODUCT_IMAGE\" TEXT," + // 11: productImage
                "\"STATE\" INTEGER NOT NULL ," + // 12: state
                "\"REMARK\" TEXT," + // 13: remark
                "\"TASTE_ID\" TEXT," + // 14: tasteID
                "\"IS_DA_ZHE\" TEXT," + // 15: IsDaZhe
                "\"DA_ZHE\" TEXT," + // 16: daZhe
                "\"WAR_COUNT\" TEXT," + // 17: warCount
                "\"IS_CLOSE\" INTEGER NOT NULL ," + // 18: IsClose
                "\"IS_CLOSE_NAME\" TEXT," + // 19: isCloseName
                "\"PRODUCT_COUNT\" INTEGER NOT NULL ," + // 20: productCount
                "\"CHU_CAI_TYPE\" TEXT," + // 21: chuCaiType
                "\"CAN_DISCOUNT\" INTEGER NOT NULL ," + // 22: canDiscount
                "\"MEMBER_PICE\" REAL NOT NULL ," + // 23: memberPice
                "\"SALES_TYPE\" INTEGER NOT NULL ," + // 24: salesType
                "\"ACCORD_ING\" TEXT," + // 25: accordIng
                "\"PRODUCT_PROPERTY\" TEXT," + // 26: productProperty
                "\"PRODUCT_GIVE\" TEXT," + // 27: productGive
                "\"TASTE_TYPE\" TEXT," + // 28: tasteType
                "\"PRINT_WAY\" TEXT," + // 29: printWay
                "\"TYPE\" INTEGER NOT NULL ," + // 30: type
                "\"PACKAGE_NAME\" TEXT," + // 31: packageName
                "\"COUNTS\" TEXT," + // 32: counts
                "\"GUID\" TEXT);"); // 33: guid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FoodEntity entity) {
        stmt.clearBindings();
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(1, productId);
        }
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(2, restaurantId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(4, productName);
        }
 
        String pinYin = entity.getPinYin();
        if (pinYin != null) {
            stmt.bindString(5, pinYin);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String minUnit = entity.getMinUnit();
        if (minUnit != null) {
            stmt.bindString(7, minUnit);
        }
 
        String productTypeId = entity.getProductTypeId();
        if (productTypeId != null) {
            stmt.bindString(8, productTypeId);
        }
 
        String productTypeName = entity.getProductTypeName();
        if (productTypeName != null) {
            stmt.bindString(9, productTypeName);
        }
        stmt.bindDouble(10, entity.getPrice());
 
        String productFile = entity.getProductFile();
        if (productFile != null) {
            stmt.bindString(11, productFile);
        }
 
        String productImage = entity.getProductImage();
        if (productImage != null) {
            stmt.bindString(12, productImage);
        }
        stmt.bindLong(13, entity.getState());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String tasteID = entity.getTasteID();
        if (tasteID != null) {
            stmt.bindString(15, tasteID);
        }
 
        String IsDaZhe = entity.getIsDaZhe();
        if (IsDaZhe != null) {
            stmt.bindString(16, IsDaZhe);
        }
 
        String daZhe = entity.getDaZhe();
        if (daZhe != null) {
            stmt.bindString(17, daZhe);
        }
 
        String warCount = entity.getWarCount();
        if (warCount != null) {
            stmt.bindString(18, warCount);
        }
        stmt.bindLong(19, entity.getIsClose());
 
        String isCloseName = entity.getIsCloseName();
        if (isCloseName != null) {
            stmt.bindString(20, isCloseName);
        }
        stmt.bindLong(21, entity.getProductCount());
 
        String chuCaiType = entity.getChuCaiType();
        if (chuCaiType != null) {
            stmt.bindString(22, chuCaiType);
        }
        stmt.bindLong(23, entity.getCanDiscount());
        stmt.bindDouble(24, entity.getMemberPice());
        stmt.bindLong(25, entity.getSalesType());
 
        String accordIng = entity.getAccordIng();
        if (accordIng != null) {
            stmt.bindString(26, accordIng);
        }
 
        String productProperty = entity.getProductProperty();
        if (productProperty != null) {
            stmt.bindString(27, productProperty);
        }
 
        String productGive = entity.getProductGive();
        if (productGive != null) {
            stmt.bindString(28, productGive);
        }
 
        String tasteType = entity.getTasteType();
        if (tasteType != null) {
            stmt.bindString(29, tasteType);
        }
 
        String printWay = entity.getPrintWay();
        if (printWay != null) {
            stmt.bindString(30, printWay);
        }
        stmt.bindLong(31, entity.getType() ? 1L: 0L);
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(32, packageName);
        }
 
        String counts = entity.getCounts();
        if (counts != null) {
            stmt.bindString(33, counts);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(34, guid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FoodEntity entity) {
        stmt.clearBindings();
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(1, productId);
        }
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(2, restaurantId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(4, productName);
        }
 
        String pinYin = entity.getPinYin();
        if (pinYin != null) {
            stmt.bindString(5, pinYin);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String minUnit = entity.getMinUnit();
        if (minUnit != null) {
            stmt.bindString(7, minUnit);
        }
 
        String productTypeId = entity.getProductTypeId();
        if (productTypeId != null) {
            stmt.bindString(8, productTypeId);
        }
 
        String productTypeName = entity.getProductTypeName();
        if (productTypeName != null) {
            stmt.bindString(9, productTypeName);
        }
        stmt.bindDouble(10, entity.getPrice());
 
        String productFile = entity.getProductFile();
        if (productFile != null) {
            stmt.bindString(11, productFile);
        }
 
        String productImage = entity.getProductImage();
        if (productImage != null) {
            stmt.bindString(12, productImage);
        }
        stmt.bindLong(13, entity.getState());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String tasteID = entity.getTasteID();
        if (tasteID != null) {
            stmt.bindString(15, tasteID);
        }
 
        String IsDaZhe = entity.getIsDaZhe();
        if (IsDaZhe != null) {
            stmt.bindString(16, IsDaZhe);
        }
 
        String daZhe = entity.getDaZhe();
        if (daZhe != null) {
            stmt.bindString(17, daZhe);
        }
 
        String warCount = entity.getWarCount();
        if (warCount != null) {
            stmt.bindString(18, warCount);
        }
        stmt.bindLong(19, entity.getIsClose());
 
        String isCloseName = entity.getIsCloseName();
        if (isCloseName != null) {
            stmt.bindString(20, isCloseName);
        }
        stmt.bindLong(21, entity.getProductCount());
 
        String chuCaiType = entity.getChuCaiType();
        if (chuCaiType != null) {
            stmt.bindString(22, chuCaiType);
        }
        stmt.bindLong(23, entity.getCanDiscount());
        stmt.bindDouble(24, entity.getMemberPice());
        stmt.bindLong(25, entity.getSalesType());
 
        String accordIng = entity.getAccordIng();
        if (accordIng != null) {
            stmt.bindString(26, accordIng);
        }
 
        String productProperty = entity.getProductProperty();
        if (productProperty != null) {
            stmt.bindString(27, productProperty);
        }
 
        String productGive = entity.getProductGive();
        if (productGive != null) {
            stmt.bindString(28, productGive);
        }
 
        String tasteType = entity.getTasteType();
        if (tasteType != null) {
            stmt.bindString(29, tasteType);
        }
 
        String printWay = entity.getPrintWay();
        if (printWay != null) {
            stmt.bindString(30, printWay);
        }
        stmt.bindLong(31, entity.getType() ? 1L: 0L);
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(32, packageName);
        }
 
        String counts = entity.getCounts();
        if (counts != null) {
            stmt.bindString(33, counts);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(34, guid);
        }
    }

    @Override
    protected final void attachEntity(FoodEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FoodEntity readEntity(Cursor cursor, int offset) {
        FoodEntity entity = new FoodEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // productId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // restaurantId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pinYin
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // minUnit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // productTypeId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // productTypeName
            cursor.getDouble(offset + 9), // price
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // productFile
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // productImage
            cursor.getInt(offset + 12), // state
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // remark
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // tasteID
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // IsDaZhe
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // daZhe
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // warCount
            cursor.getInt(offset + 18), // IsClose
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // isCloseName
            cursor.getInt(offset + 20), // productCount
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // chuCaiType
            cursor.getInt(offset + 22), // canDiscount
            cursor.getDouble(offset + 23), // memberPice
            cursor.getInt(offset + 24), // salesType
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // accordIng
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // productProperty
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // productGive
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // tasteType
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // printWay
            cursor.getShort(offset + 30) != 0, // type
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // packageName
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // counts
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33) // guid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FoodEntity entity, int offset) {
        entity.setProductId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRestaurantId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPinYin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMinUnit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProductTypeId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProductTypeName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPrice(cursor.getDouble(offset + 9));
        entity.setProductFile(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProductImage(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setState(cursor.getInt(offset + 12));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTasteID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsDaZhe(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDaZhe(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWarCount(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsClose(cursor.getInt(offset + 18));
        entity.setIsCloseName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setProductCount(cursor.getInt(offset + 20));
        entity.setChuCaiType(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCanDiscount(cursor.getInt(offset + 22));
        entity.setMemberPice(cursor.getDouble(offset + 23));
        entity.setSalesType(cursor.getInt(offset + 24));
        entity.setAccordIng(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setProductProperty(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setProductGive(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setTasteType(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setPrintWay(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setType(cursor.getShort(offset + 30) != 0);
        entity.setPackageName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCounts(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setGuid(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FoodEntity entity, long rowId) {
        return entity.getProductId();
    }
    
    @Override
    public String getKey(FoodEntity entity) {
        if(entity != null) {
            return entity.getProductId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FoodEntity entity) {
        return entity.getProductId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "foodEntityList" to-many relationship of FoodTypeEntity. */
    public List<FoodEntity> _queryFoodTypeEntity_FoodEntityList(String productTypeId) {
        synchronized (this) {
            if (foodTypeEntity_FoodEntityListQuery == null) {
                QueryBuilder<FoodEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductTypeId.eq(null));
                foodTypeEntity_FoodEntityListQuery = queryBuilder.build();
            }
        }
        Query<FoodEntity> query = foodTypeEntity_FoodEntityListQuery.forCurrentThread();
        query.setParameter(0, productTypeId);
        return query.list();
    }

}
