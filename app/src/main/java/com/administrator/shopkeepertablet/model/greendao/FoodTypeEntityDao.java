package com.administrator.shopkeepertablet.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.administrator.shopkeepertablet.model.entity.FoodTypeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOD_TYPE_ENTITY".
*/
public class FoodTypeEntityDao extends AbstractDao<FoodTypeEntity, String> {

    public static final String TABLENAME = "FOOD_TYPE_ENTITY";

    /**
     * Properties of entity FoodTypeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProductTypeId = new Property(0, String.class, "productTypeId", true, "PRODUCT_TYPE_ID");
        public final static Property RestaurantId = new Property(1, String.class, "restaurantId", false, "RESTAURANT_ID");
        public final static Property ProductTypeName = new Property(2, String.class, "productTypeName", false, "PRODUCT_TYPE_NAME");
        public final static Property OrderNo = new Property(3, String.class, "orderNo", false, "ORDER_NO");
    }

    private DaoSession daoSession;


    public FoodTypeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FoodTypeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOD_TYPE_ENTITY\" (" + //
                "\"PRODUCT_TYPE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: productTypeId
                "\"RESTAURANT_ID\" TEXT," + // 1: restaurantId
                "\"PRODUCT_TYPE_NAME\" TEXT," + // 2: productTypeName
                "\"ORDER_NO\" TEXT);"); // 3: orderNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOD_TYPE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FoodTypeEntity entity) {
        stmt.clearBindings();
 
        String productTypeId = entity.getProductTypeId();
        if (productTypeId != null) {
            stmt.bindString(1, productTypeId);
        }
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(2, restaurantId);
        }
 
        String productTypeName = entity.getProductTypeName();
        if (productTypeName != null) {
            stmt.bindString(3, productTypeName);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(4, orderNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FoodTypeEntity entity) {
        stmt.clearBindings();
 
        String productTypeId = entity.getProductTypeId();
        if (productTypeId != null) {
            stmt.bindString(1, productTypeId);
        }
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(2, restaurantId);
        }
 
        String productTypeName = entity.getProductTypeName();
        if (productTypeName != null) {
            stmt.bindString(3, productTypeName);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(4, orderNo);
        }
    }

    @Override
    protected final void attachEntity(FoodTypeEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FoodTypeEntity readEntity(Cursor cursor, int offset) {
        FoodTypeEntity entity = new FoodTypeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // productTypeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // restaurantId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // productTypeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // orderNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FoodTypeEntity entity, int offset) {
        entity.setProductTypeId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRestaurantId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FoodTypeEntity entity, long rowId) {
        return entity.getProductTypeId();
    }
    
    @Override
    public String getKey(FoodTypeEntity entity) {
        if(entity != null) {
            return entity.getProductTypeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FoodTypeEntity entity) {
        return entity.getProductTypeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
